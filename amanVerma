1.Implement the Algorithm for Reversing elements of an Array.
//Aman Verma
//21116005
#include <bits/stdc++.h>
using namespace std;
int main() {
int a[9] = {9, 8, 7, 5, 6, 4, 2, 1, 3};
int n = sizeof(a) / 4;
int s = 0, e = n - 1;
for (int i = 0; i < n; i++) cout << a[i] << " ";
cout << endl;
while (s <= e) {
swap(a[s], a[e]);
s++; e--;
}
for (int i = 0; i < n; i++) cout << a[i] << " ";
cout << endl;
}

2. Implement the Algorithm for Linear Search.
// Aman Verma
// 21116005
include <bits/stdc++.h>
using namespace std;
int linearSearch(int a[], int n, int target) {
for (int i = 0; i < n; i++) if (a[i] == target) return i;
return -1;
}
int main() {
int a[9] = {9, 8, 7, 5, 6, 4, 2, 1, 3};
int n = sizeof(a) / 4;
int ind = linearSearch(a, n, 3);
if (ind == -1) cout << "Not found\n";
else cout << "Found at ind: " << ind << endl;
}

3.Implement the Algorithm for Binary Search.
//Aman Verma
//21116005
#include <bits/stdc++.h>
using namespace std;
int binarySearch(int a[], int n, int target) {
int s = 0, e = n - 1;
int mid;
while (s <= e) {
mid = s + (e - s) / 2;
if (a[mid] == target) return mid;
if (a[mid] > target) e = mid - 1;
else s = mid + 1;
}
return -1;
}
int main() {
int a[9] = {1,2,3,4,5,6,7,8,9};
int n = sizeof(a) / 4;
int ind = binarySearch(a, n, 3);
if (ind == -1) cout << "Not found\n";
else cout << "Found at ind: " << ind << endl;}

4.Implement the Algorithm for Bubble Sort.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
void bubbleSort(int arr[], int n)
{
int i, j;
for (i = 0; i < n - 1; i++)
for (j = 0; j < n - i - 1; j++)
if (arr[j] > arr[j + 1])
swap(arr[j], arr[j + 1]);
}
void printArray(int arr[], int size)
{
int i;
for (i = 0; i < size; i++)
cout << arr[i] << " ";
cout << endl;
}
int main()
{ int arr[] = { 5, 1, 4, 2, 8};
int N = sizeof(arr) / sizeof(arr[0]);
bubbleSort(arr, N);
cout << "Sorted array: \n";
printArray(arr, N);
return 0; }

5. Implement the Algorithm for Selection Sort.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
void swap(int *xp, int *yp)
{
int temp = *xp;
*xp = *yp;
*yp = temp;
}
void selectionSort(int arr[], int n)
{
int i, j, min_idx;
for (i = 0; i < n-1; i++)
{ min_idx = i;
for (j = i+1; j < n; j++)
if (arr[j] < arr[min_idx])
min_idx = j;
swap(&arr[min_idx], &arr[i]);
}}
void printArray(int arr[], int size)
{
int i;
for (i=0; i < size; i++)
cout << arr[i] << " ";
cout << endl;}
int main()
{
int arr[] = {64, 25, 12, 22, 11};
int n = sizeof(arr)/sizeof(arr[0]);
selectionSort(arr, n);
cout << "Sorted array: \n";
printArray(arr, n);
return 0;}

6. Implement the Algorithm for Insertion Sort.
//Aman Verma
//21116005
#include<iostream>
using namespace std;
void display(int *array, int size) {
for(int i = 0; i<size; i++)
cout << array[i] << " ";
cout << endl;
}
void insertionSort(int *array, int size) {
int key, j;
for(int i = 1; i<size; i++) {
key = array[i];//take value
j = i;
while(j > 0 && array[j-1]>key) {
array[j] = array[j-1];
j--;
}
array[j] = key; //insert in right place
}
}
int main() {
int n;
cout << "Enter the number of elements: ";
cin >> n;
int arr[n]; //create an array with given number of elements
cout << "Enter elements:" << endl;
for(int i = 0; i<n; i++) {
cin >> arr[i];
}
cout << "Array before Sorting: ";
display(arr, n);
insertionSort(arr, n);
cout << "Array after Sorting: ";
display(arr, n);
}

7. Implement the Algorithm for Factorial using Recursion.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
unsigned int factorial(unsigned int n)
{
if (n == 0)
return 1;
return n * factorial(n - 1);
}
int main()
{
int num = 5;
cout << "Factorial of "
<< num << " is " << factorial(num) << endl;
return 0;
}

8. Implement the Algorithm for Inserting a Node at the beginning and end of a Linked
List.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
class Node{
public:
int data;
Node*next;
};
Node*start=NULL;
void pushatstart(int data){
Node* newnode=new Node();
newnode->data=data;
newnode->next=start;
start=newnode;
}
void pushatend(int data){
Node*new_node= new Node();
Node*last=start;
new_node->data=data;
new_node->next=NULL;
if(start==NULL){
start=new_node;
return;
}
while(last->next!=NULL){
last=last->next;
}
last->next=new_node;
return;
}
void display1(){
Node*temp=start;
while(temp!=NULL){
cout<<temp->data<<" ";
temp=temp->next;
}
}
int main(){
//Creating the elements of linked list first.
pushatstart(12);
pushatstart(34); pushatstart(45);
cout<<"Current linked list :"<<endl;
display1();
cout<<endl;
//Inserting a node at the begining of the linked list and then at the end
pushatstart(6);
cout<<"Current linked list after inserting at the start:"<<endl;
display1();
cout<<endl;
pushatend(78);
cout<<"Current linked list after inserting at the end:"<<endl;
display1();
cout<<endl;
return 0;
}

9. Implement the Algorithm for Inserting a Node at the Given Location of a
Linked List.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
struct Node {
int data;
struct Node* next;
};
int size = 0;
Node* getNode(int data)
{
Node* newNode = new Node();
newNode->data = data;
newNode->next = NULL;
return newNode;
}
void insertPos(Node** current, int pos, int data)
{
if (pos < 1 || pos > size + 1)
cout << "Invalid position!" << endl;
else {
while (pos--) {
if (pos == 0) {
Node* temp = getNode(data);
temp->next = *current;
*current = temp;
}
else
current = &(*current)->next;
}
size++;
}
}
void printList(struct Node* head)
{
while (head != NULL) {
cout << " " << head->data;
head = head->next;
}
cout << endl;
}
int main()
{
Node* head = NULL;
head = getNode(3);
head->next = getNode(5);
head->next->next = getNode(8);
head->next->next->next = getNode(10);
size = 4;
cout << "Linked list before insertion: ";
printList(head);
int data = 12, pos = 3;
insertPos(&head, pos, data);
cout << "Linked list after insertion of 12 at position 3: ";
printList(head);
data = 1, pos = 1;
insertPos(&head, pos, data);
cout << "Linked list after insertion of 1 at position 1: ";
printList(head);
data = 15, pos = 7;
insertPos(&head, pos, data);
cout << "Linked list after insertion of 15 at position 7: ";
printList(head);
return 0;
}

10. Implement the Algorithm for Deleting a Node of a Linked List.
//Aman Verma
//21116005
#include <iostream>
using namespace std;
class Node{
public:
int data;
Node* next;
};
void push(Node** head_ref, int new_data)
{
Node* new_node = new Node();
new_node->data = new_data;
new_node->next = (*head_ref);
(*head_ref) = new_node;
}
void deleteNode(Node** head_ref, int key)
{
Node* temp = *head_ref;
Node* prev = NULL;
if (temp != NULL && temp->data == key)
{
*head_ref = temp->next;
delete temp;
return;
}
else
{
while (temp != NULL && temp->data != key)
{
prev = temp;
temp = temp->next;
}
if (temp == NULL)
return;
prev->next = temp->next;
delete temp;
}
}
void printList(Node* node)
{
while (node != NULL)
{
cout << node->data << " ";
node = node->next;
}
}
int main()
{
Node* head = NULL;
push(&head, 7);
push(&head, 1);
push(&head, 3);
push(&head, 2);
puts("Created Linked List: ");
printList(head);
deleteNode(&head, 1);
puts("\nLinked List after Deletion of 1: ");
printList(head);
return 0;}
